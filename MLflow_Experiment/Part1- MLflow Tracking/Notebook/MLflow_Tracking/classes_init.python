{"version":"NotebookV1","origId":3025325144983992,"name":"classes_init","language":"python","commands":[{"version":"CommandV1","origId":3025325144983993,"guid":"2ee0ff0f-6343-47f1-bff5-4042b2c52224","subtype":"command","commandType":"auto","position":0.25,"command":"%md ### Classes and Utility functions","commandVersion":18,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"da61644c-4253-4b7c-95b0-28d712fea960"},{"version":"CommandV1","origId":3025325144983994,"guid":"3a6aac4e-a35a-495f-b676-d660e96602d5","subtype":"command","commandType":"auto","position":0.5,"command":"import pandas as pd\nimport tensorflow as tf\nimport time\nfrom mlflow.tracking.client import MlflowClient\nfrom mlflow.entities.model_registry.model_version_status import ModelVersionStatus","commandVersion":26,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158040,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"2429809006263493","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b0231fd4-f36b-4f46-8a50-96cb438c45a6"},{"version":"CommandV1","origId":3025325144983995,"guid":"e7b543eb-9a6d-48ac-957f-c6c607c28cab","subtype":"command","commandType":"auto","position":0.75,"command":"import warnings\nwarnings.filterwarnings(\"ignore\")","commandVersion":3,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"2429809006263493","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1a294ebe-e219-458d-b0be-725a2118b53b"},{"version":"CommandV1","origId":3025325144983996,"guid":"f3ff083e-bb6f-46b0-8cb3-8209b92093fd","subtype":"command","commandType":"auto","position":1.0,"command":"class Utils:\n  @staticmethod\n  def load_data():\n    fashion_mnist = tf.keras.datasets.fashion_mnist\n    (x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()\n    x_train, x_test = x_train / 255.0, x_test / 255.0\n    \n    # Increase one dimension so it can be used by the 2D convolutional keras layer\n    x_train = np.expand_dims(x_train,-1)\n    x_test = np.expand_dims(x_test,-1)\n    print(\"x_train.shape:\", x_train.shape)\n    return (x_train, y_train), (x_test, y_test)","commandVersion":167,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158055,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2273040f-af21-434e-be53-6eda2481aa47"},{"version":"CommandV1","origId":3025325144983997,"guid":"9ff12803-51c2-4c5e-8097-5b508d51bb7d","subtype":"command","commandType":"auto","position":1.0625,"command":"displayHTML(\"\"\"\n<div> Declared Utils class with utility methods:</div> \n  <li> Declared <b style=\"color:green\">load_data(path, index_col=0)</b> returns numpy arrays of training and test data</li><br/>\n\"\"\")","commandVersion":23,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575308787420,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"69ee11bc-79cd-4078-a0b4-793b8268e210"},{"version":"CommandV1","origId":3025325144983998,"guid":"c103bdd2-6027-4049-bc05-7fd7b68f83b2","subtype":"command","commandType":"auto","position":1.125,"command":"import pandas as pd\nimport matplotlib.dates as mdates\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport itertools","commandVersion":5,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"2429809006263493","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c33d9040-1288-49cc-a90a-4bd01755ed98"},{"version":"CommandV1","origId":3025325144983999,"guid":"63c9ff99-3212-438a-8e37-264dc4cd6576","subtype":"command","commandType":"auto","position":1.25,"command":"class PlotUtils:\n    @staticmethod\n    def confusionMatrix(y_test, preditcion, classes,\n                        normalize=False,\n                        title='Confusion matrix',\n                        cmap=plt.cm.Blues):\n      \"\"\"\n      This function prints and plots the confusion matrix.\n      Normalization can be applied by setting `normalize=True`.\n      \"\"\"\n      cm = confusion_matrix(y_test, preditcion)\n      if normalize:\n          cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n          print(\"Normalized confusion matrix\")\n      else:\n          print('Confusion matrix, without normalization')\n\n      print(cm)\n\n      plt.imshow(cm, interpolation='nearest', cmap=cmap)\n      plt.title(title)\n      plt.colorbar()\n      tick_marks = np.arange(len(classes))\n      plt.xticks(tick_marks, classes, rotation=45)\n      plt.yticks(tick_marks, classes)\n\n      fmt = '.2f' if normalize else 'd'\n      thresh = cm.max() / 2.\n      for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n          plt.text(j, i, format(cm[i, j], fmt),\n                   horizontalalignment=\"center\",\n                   color=\"white\" if cm[i, j] > thresh else \"black\")\n\n      plt.tight_layout()\n      plt.ylabel('True label')\n      plt.xlabel('Predicted label')\n      plt.show()\n      \n    @staticmethod\n    def predticClassification (model_uri, x_test):\n      '''\n      Function that loads a pyfunc flavor of the model and predicts with unseen data\n      '''\n      print(\"Loading registered model version from URI: '{model_uri}'\".format(model_uri=model_uri))\n      model = mlflow.pyfunc.load_model(model_uri)\n      predictions = pd.DataFrame(model.predict(x_test))\n      return predictions","commandVersion":142,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"2429809006263493","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0b206e07-3cb0-41b2-96a7-af4bc75b4e09"},{"version":"CommandV1","origId":3025325144984000,"guid":"3a5926a9-821b-4623-9621-4c0e73998377","subtype":"command","commandType":"auto","position":1.375,"command":"displayHTML(\"\"\"\n<div> Declared PlotUtils class with utility methods:</div> \n  <li> Declared <b style=\"color:green\">confusionMatrix(model_uri, power_predictions, past_power_output)</b> Plots a confusion matrix </li>\n  <li> Declared <b style=\"color:green\">predticClassification(model_uri, x_test)</b> Returns the result of the model's prediction</b></li>\n   <br/>\n\"\"\")","commandVersion":76,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575231620794,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"362ccff6-f624-434e-be87-c27dd5f56c5f"},{"version":"CommandV1","origId":3025325144984001,"guid":"42a22011-b03f-4d6f-95ed-ebc054c7b8de","subtype":"command","commandType":"auto","position":1.75,"command":"from tensorflow.keras.layers import Input, Conv2D, Dense, Flatten, Dropout, GlobalMaxPooling2D\nfrom tensorflow.keras.models import Model\nimport mlflow\nimport mlflow.tensorflow\n\nprint(\"Using mlflow version {}\".format(mlflow.__version__))","commandVersion":37,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158077,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"2429809006263493","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ff36e874-66d8-4558-85ed-9d767dc0b749"},{"version":"CommandV1","origId":3025325144984002,"guid":"c7dd4c29-7c53-49f3-a908-033e38e4b124","subtype":"command","commandType":"auto","position":2.0,"command":"class TensorFlowModel:\n  def __init__(self, x_train, y_train, x_test, y_test, params, activation=\"softmax\"):\n    self.params= params\n    self.x_train = np.expand_dims(x_train,-1)\n    self.x_test = np.expand_dims(x_test,-1)\n    self.y_train= y_train\n    self.y_test= y_test\n    self.K = len(set(y_train))\n    self.i = Input(shape=self.x_train[0].shape)\n    self.x = Conv2D(32, params['convSize'], strides=2, activation='relu')(self.i)\n    self.x = Conv2D(64, params['convSize'], strides=2, activation='relu')(self.x)\n    self.x = Conv2D(128, params['convSize'], strides=2, activation='relu')(self.x)\n    self.x = Flatten()(self.x)\n    self.x = Dropout(0.2)(self.x)\n    self.x = Dense(512, activation='relu')(self.x)\n    self.x = Dropout(0.2)(self.x)\n    self.x = Dense(self.K, activation=activation)(self.x)\n    self._model= Model(self.i,self.x)\n    self._model.compile(optimizer='adam',\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy'])\n  \n  def mlflow_run(self, run_name=\"TensorFlow: MNIST Model\"):\n    with mlflow.start_run(run_name=run_name) as run:\n      # Automatically capture the model's parameters, metrics, artifacts,\n      # and source code with the autolog() function\n      mlflow.tensorflow.autolog()\n      self._model.fit(self.x_train, self.y_train, validation_data=(self.x_test, self.y_test),epochs=self.params['epochs'])\n    return run.info.run_id\n    ","commandVersion":449,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158096,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"2429809006263493","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"7b58e3a3-2e88-4d12-994e-4a2f83e58491"},{"version":"CommandV1","origId":3025325144984003,"guid":"012c63a3-6d81-438e-adbc-edd4efb22fce","subtype":"command","commandType":"auto","position":3.0,"command":"displayHTML(\"\"\"\n<div> Declared TensorFlowModel class with public methods:</div> \n  <li> Declared <b style=\"color:green\"> mlflow_run(model, X_train, y_train, **kwargs)</b> returns MLflow run_id </li>\n  <br/>\n\"\"\")","commandVersion":112,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158106,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c08d94de-552c-405e-942d-ff9e07de3859"}],"dashboards":[],"guid":"c7fefb6b-0e11-40a8-8db7-6ff7b2226d86","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}